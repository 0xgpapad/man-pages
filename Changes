==================== Changes in man-pages-3.55 ====================

Released: ????-??-??, Christchurch


Contributors
------------

The following people contributed patches/fixes or (noted in brackets
in the changelog below) reports, notes, and ideas that have been
incorporated in changes in this release:

Alfred Agrell <alfred@agrell.info>
Andreas Sandberg <andreas.sandberg@it.uu.se>
Christoph Hellwig <hch@infradead.org>
David Gibson <david@gibson.dropbear.id.au>
David Pr√©vot <taffit@debian.org>
Fabrice Bauzac <libnoon@gmail.com>
Greg Price <price@mit.edu>
Jon Grant <jg@jguk.org>
KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
Liu Jiaming <storypku@gmail.com>
Maxin B. John <maxin.john@enea.com>
Michael Kerrisk <mtk.manpages@gmail.com>
Paolo Bonzini <bonzini@gnu.org>
Peng Haitao <penght@cn.fujitsu.com>
Robert P. J. Day <rpjday@crashcourse.ca>
Rodrigo Campos <rodrigo@sdfg.com.ar>
Shawn Landden <shawn@churchofgit.com>
Trevor Bramwell <trevor@bramwell.net>
Vince Weaver <vincent.weaver@maine.edu>
Yang Yang <yangyang.gnu@gmail.com>
Yuanhang Zheng <zhengyhn@gmail.com>
Yuri Kozlov <yuray@komyakino.ru>
janh <a0vhv@t-online.de>

Apologies if I missed anyone!


Global changes
--------------

assert.3
assert_perror.3
rexec.3
rpc.3
    Michael Kerrisk  [Jon Grant]
        Reword a sentence to use more gender-neutral language


Changes to individual pages
---------------------------

execve.2
    Michael Kerrisk
        'arg...' for interpreter scripts starts with argv[1]

fallocate.2
    Christoph Hellwig
        Clarify the zeroing behavior
            fallocate() zeroes only space that did not previously contain
            data, but leaves existing data untouched.

futex.2
    Rodrigo Campos
        Fix link to Rusty's futex example library
            When I asked to webmaster@kernel.org, Konstantin Ryabitsev
            answered that the ".nl." is "an obsolete scheme and really
            should be changed to just ftp.kernel.org".

getgroups.2
    Michael Kerrisk
        Note that NGROUPS_MAX is defined in <limits.h>
    Michael Kerrisk
        Clarify that sysconf(_SC_NGROUPS_MAX) is a run-time technique
    Michael Kerrisk
        Document /proc/sys/kernel/ngroups_max

ioctl.2
    Michael Kerrisk  [KOSAKI Motohiro, David Gibson]
        'request' argument is typed as 'unsigned long' in glibc
            See https://bugzilla.kernel.org/show_bug.cgi?id=42705

perf_event_open.2
    Vince Weaver
        Linux 3.12 rdpmc/mmap
            It turns out that the perf_event mmap page rdpmc/time setting was
            broken, dating back to the introduction of the feature.  Due
            to a mistake with a bitfield, two different values mapped to
            the same feature bit.

            A new somewhat backwards compatible interface was introduced
            in Linux 3.12.  A much longer report on the issue can be found
            here:
               https://lwn.net/Articles/567894/
    Vince Weaver
        Linux 3.12 adds PERF_SAMPLE_IDENTIFIER
            A new PERF_SAMPLE_IDENTIFIER sample type was added in Linux 3.12.
    Vince Weaver
        E2BIG documentation
            The following documents the E2BIG error return for
            perf_event_open().

            I actually ran into this error the hard way and it took me
            half a day to figure out why my ->size value was changing.
    Vince Weaver
        Linux 3.12 adds PERF_EVENT_IOC_ID
            A new perf_event related ioctl, PERF_EVENT_IOC_ID, was added
            in Linux 3.12.
    Vince Weaver
        PERF_COUNT_SW_DUMMY support
            Support for the PERF_COUNT_SW_DUMMY event type was added in
            Linux 3.12.
    Vince Weaver  [Andreas Sandberg]
        PERF_EVENT_IOC_PERIOD update
            The PERF_EVENT_IOC_PERIOD ioctl was broken until 2.6.36,
            and it turns out that the ARM architecture has some
            differing behavior too.

pipe.2
    Trevor Bramwell
        Fix error in example program

poll.2
    Michael Kerrisk  [Paolo Bonzini]
        Clarify meaning of events==0
            events==0 does not mean that revents is always returned as
            zero. The "output only" events (POLLHUP, POLLERR, POLLNVAL)
            can still be returned.

            See https://bugzilla.kernel.org/show_bug.cgi?id=61911

readlink.2
    Michael Kerrisk  [Yuanhang Zheng]
        Fix typo in error message in example program

recv.2
    Michael Kerrisk
        Remove out-of-date statement that UNIX domain does not support MSG_TRUNC
            Should have removed that sentence as part of
            commit a25601b48b822eb1882ae336574b8d062a17e564

sched_get_priority_max.2
    Michael Kerrisk
        Add SCHED_IDLE to discussion

send.2
    Michael Kerrisk
        RETURN VALUE: these calls return number of bytes (not characters) sent

setreuid.2
    Michael Kerrisk
        Small clarification to description of when saved set-user-ID is set

sigpending.2
    Michael Kerrisk
        Note treatment of signals that are blocked *and* ignored

stat.2
    Michael Kerrisk
        Note filesystem support for nanosecond timestamps
            Add some detail on which native filesystems do and don't
            support nanosecond timestamps.
    Michael Kerrisk
        Cosmetic reworking of timestamp discussion in NOTES
    Michael Kerrisk  [Yang Yang]
        Update discussion of nanosecond timestamps
            The existing text describes the timestamp fields as 'time_t'
            and delegates discussion of nanosecond timestamps under NOTES.
            Nanosecond timestamps have been around for a while now,
            and are in POSIX.1-2008, so reverse the orientation of the
            discussion, putting the nanosecond fields into DESCRIPTION
            and detailing the historical situation under NOTES.

symlink.2
    Michael Kerrisk
        Further fine tuning of argument names
            Follow-up to f2ae6dde0c68448bec986d12fe32268a2c98bfd9
            See https://sourceware.org/bugzilla/show_bug.cgi?id=16073
    Michael Kerrisk  [Fabrice Bauzac]
        Give arguments of symlink() more meaningful names

adjtime.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function adjtime() is thread safe.

alloca.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function alloca() is thread safe.

asinh.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions asinh(), asinhf() and asinhl() are thread safe.

atan.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions atan(), atanf() and atanl() are thread safe.

atof.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread safe with exceptions
            The function atof() is thread safe with exceptions.

atoi.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread safe with exceptions
            The functions atoi(), atol() and atoll() are thread safe with
            exceptions.

bcmp.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function bcmp() is thread safe.

bcopy.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function bcopy() is thread safe.

bsd_signal.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function bsd_signal() is thread safe.

bzero.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function bzero() is thread safe.

cbrt.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions cbrt(), cbrtf() and cbrtl() are thread safe.

copysign.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions copysign(), copysignf() and copysignl() are thread
            safe.

cos.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions cos(), cosf() and cosl() are thread safe.

cproj.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions cproj(), cprojf() and cprojl() are thread safe.

creal.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions creal(), crealf() and creall() are thread safe.

daemon.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function daemon() is thread safe.

des_crypt.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions ecb_crypt(), cbc_crypt() and des_setparity() are
            thread safe.

difftime.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function difftime() is thread safe.

dysize.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function dysize() is thread safe.

erf.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions erf(), erff() and erfl() are thread safe.

erfc.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions erfc(), erfcf() and erfcl() are thread safe.

euidaccess.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions euidaccess() and eaccess() are thread safe.

expm1.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions expm1(), expm1f() and expm1l() are thread safe.

fexecve.3
    Michael Kerrisk
        POSIX.1-2008 specifies fexecve()
    Michael Kerrisk
        Explain the use and rationale of fexecve()

ftime.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function ftime() is thread safe.

ftok.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function ftok() is thread safe.

ftw.3
    Michael Kerrisk
        nftw() visits directories with FTW_D if FTW_DEPTH was not specified
    Michael Kerrisk
        Explain probable cause of FTW_NS

futimes.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions futimes() and lutimes() are thread safe.

getaddrinfo.3
    Michael Kerrisk
        Explain one use case for AI_ADDRCONFIG
    Michael Kerrisk
        Highlight difference in ai_flags when hints==NULL
            NOTES already described how glibc differs from POSIX.
            Add a pointer to that text from the point in DESCRIPTION
            where hints==NULL is discussed.

kcmp.3
    Shawn Landden
        Reword slightly awkward section

malloc.3
    Greg Price
        Scale back promises of alignment
            It's not true that the return value is suitably aligned for "any
            variable"; for example, it's unsuitable for a variable like
              float *x __attribute__ ((__vector_size__ (32)));
            which requires 32-byte alignment.  Types like this are defined in
            <avxintrin.h>, and with 16-byte alignment in <emmintrin.h> and
            <xmmintrin.h>, so the application programmer need not even know
            that a vector_size attribute has been applied.

            On an x86 architecture, a program that loads from or stores to a
            pointer with this type derived from malloc can crash because GCC
            generates an aligned load/store, like MOVDQA.

            The C99 standard (TC3, as of N1256) does say the return value is
            suitably aligned for "any type of object".  The C11 standard (as
            of N1570) revises this to any type with "fundamental alignment",
            which means an alignment "supported by the implementation in all
            contexts", which I suppose tautologically includes aligning
            malloc/realloc return values.

            The actual behavior of current glibc malloc is to align to the
            greater of 2 * sizeof(size_t) and __alignof__ (long double),
            which may be one bit greater than this commit promises.

mq_receive.3
    Michael Kerrisk  [janh]
        msg_len must be greater than *or equal to* mq_msgsize
            See https://bugzilla.kernel.org/show_bug.cgi?id=64571

setenv.3
    Michael Kerrisk
        Clarify that setenv() returns success in the overwrite==0 case

sigsetops.3
    Michael Kerrisk  [Robert P. J. Day]
        Add 'const' to sigisemptyset(), sigorset(), sigandset() declarations
    Michael Kerrisk
        Rework text describing sigisemptyset(), sigorset(), and sigandset()

statvfs.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions statvfs() and fstatvfs() are thread safe.

stdarg.3
    Peng Haitao
        ATTRIBUTES: Note macros that are thread-safe
            The macros va_start(), va_arg(), va_end() and va_copy() are
            thread safe.

termios.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread-safe
            The functions tcgetattr(), tcsetattr(), tcsendbreak(),
            tcdrain(), tcflush(), tcflow(), cfmakeraw(), cfgetispeed(),
            cfgetospeed(), cfsetispeed(), cfsetospeed() and cfsetspeed()
            are thread safe.

ungetwc.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function ungetwc() is thread safe.

unlockpt.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function unlockpt() is thread safe.

usleep.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function usleep() is thread safe.

wcpcpy.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcpcpy() is thread safe.

wcscasecmp.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread safe with exceptions
            The function wcscasecmp() is thread safe with exceptions.

wcscat.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcscat() is thread safe.

wcschr.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcschr() is thread safe.

wcscmp.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcscmp() is thread safe.

wcscpy.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcscpy() is thread safe.

wcscspn.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcscspn() is thread safe.

wcslen.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcslen() is thread safe.

wcsncasecmp.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread safe with exceptions
            The function wcsncasecmp() is thread safe with exceptions.

wcsncat.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcsncat() is thread safe.

wcsncmp.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcsncmp() is thread safe.

wcsncpy.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcsncpy() is thread safe.

wcsnlen.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcsnlen() is thread safe.

wcspbrk.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcspbrk() is thread safe.

wcsrchr.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcsrchr() is thread safe.

wcsspn.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcsspn() is thread safe.

wcsstr.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcsstr() is thread safe.

wcstoimax.3
    Peng Haitao
        ATTRIBUTES: Note functions that are thread safe with exceptions
            The functions wcstoimax() and wcstoumax() are thread safe with
            exceptions.

wcstok.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wcstok() is thread safe.

wcswidth.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread safe with exceptions
            The function wcswidth() is thread safe with exceptions.

wctrans.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread safe with exceptions
            The function wctrans() is thread safe with exceptions.

wctype.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread safe with exceptions
            The function wctype() is thread safe with exceptions.

wcwidth.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread safe with exceptions
            The function wcwidth() is thread safe with exceptions.

wmemchr.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wmemchr() is thread safe.

wmemcmp.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wmemcmp() is thread safe.

wmemcpy.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wmemcpy() is thread safe.

wmemmove.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wmemmove() is thread safe.

wmemset.3
    Peng Haitao
        ATTRIBUTES: Note function that is thread-safe
            The function wmemset() is thread safe.

tty_ioctl.4
    Michael Kerrisk  [Liu Jiaming]
        Note that 'arg' should be 0 in the usual case when using TIOCSCTTY
    Michael Kerrisk
        Rework text on root to discuss just in terms of capabilities

proc.5
    Michael Kerrisk
        Document /proc/sys/kernel/ngroups_max

capabilities.7
    Michael Kerrisk
        Fix 2 version numbers under "Effect of user ID changes on capabilities"
            Reported by Liu Jiaming <storypku@gmail.com>

feature_test_macros.7
    Michael Kerrisk
        Add _ISOC11_SOURCE to example program

tcp.7
    Michael Kerrisk
        Fix (nontrivial) wordo in discussion of MSG_TRUNC
            s/MSG_PEEK/MSG_TRUNC/

ld.so.8
    Michael Kerrisk  [Alfred Agrell]
        Fix crufty wording in one sentence

