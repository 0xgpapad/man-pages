.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)queue.3	8.2 (Berkeley) 1/24/94
.\" $FreeBSD$
.\"
.Dd February 7, 2015
.Dt QUEUE 3
.Os
.Sh NAME
.Nd implementations of singly-linked lists, singly-linked tail queues,
lists, tail queues, and circular queues
.Sh SYNOPSIS
.Sh DESCRIPTION
These macros define and operate on five types of data structures:
singly-linked lists, singly-linked tail queues, lists, tail queues, and
circular queues.
All five structures support the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Insertion of a new entry at the head of the list.
.It
Insertion of a new entry after any element in the list.
.It
O(1) removal of an entry from the head of the list.
.It
Forward traversal through the list.
.\" .It
.\" Swapping the contents of two lists.
.El
.Pp
Singly-linked lists are the simplest of the four data structures
and support only the above functionality.
Singly-linked lists are ideal for applications with large datasets
and few or no removals,
or for implementing a LIFO queue.
Singly-linked lists add the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
O(n) removal of any entry in the list.
.El
.Pp
Singly-linked tail queues add the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Entries can be added at the end of a list.
.It
O(n) removal of any entry in the list.
.It
They may be concatenated.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
All list insertions must specify the head of the list.
.It
Each head entry requires two pointers rather than one.
.It
Code size is about 15% greater and operations run about 20% slower
than singly-linked lists.
.El
.Pp
Singly-linked tail queues are ideal for applications with large datasets and
few or no removals,
or for implementing a FIFO queue.
.Pp
All doubly linked types of data structures (lists and tail queues)
additionally allow:
.Pp
.Bl -enum -compact -offset indent
.It
Insertion of a new entry before any element in the list.
.It
O(1) removal of any entry in the list.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
Each element requires two pointers rather than one.
.It
Code size and execution time of operations (except for removal) is about
twice that of the singly-linked data-structures.
.El
.Pp
Linked lists are the simplest of the doubly linked data structures.
They add the following functionality over the above:
.Pp
.Bl -enum -compact -offset indent
.It
They may be traversed backwards.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
To traverse backwards, an entry to begin the traversal and the list in
which it is contained must be specified.
.El
.Pp
Tail queues add the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Entries can be added at the end of a list.
.It
They may be traversed backwards, from tail to head.
.It
They may be concatenated.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
All list insertions and removals must specify the head of the list.
.It
Each head entry requires two pointers rather than one.
.It
Code size is about 15% greater and operations run about 20% slower
than singly-linked lists.
.El
.Pp
Circular queues add the following functionality over the above:
.Pp
.Bl -enum -compact -offset indent
.It
The first and last entries are connected.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
The termination condition for traversal is more complex.
.It
Code size is about 40% greater and operations run about 45% slower than lists.
.El
.Sh EXAMPLES
.Sh CONFORMING TO
Not in POSIX.1, POSIX.1-2001 or POSIX.1-2008.
Present on the BSDs.
.Nm queue
functions first appeared in
.Bx 4.4 .
.Sh SEE ALSO
.Xr circleq 3
.Xr insque 3
.Xr list 3
.Xr slist 3
.Xr stailq 3
.\" .Xr tree 3
