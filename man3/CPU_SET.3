.\" Copyright (C) 2006 Michael Kerrisk
.\" and Copyright (C) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.TH CPU_SET 2 2008-11-12 "Linux" "Linux Programmer's Manual"
.SH NAME
CPU_SET, CPU_CLR, CPU_ISSET, CPU_ZERO, CPU_COUNT,
CPU_AND, CPU_OR, CPU_XOR, CPU_EQUAL \-
macros for manipulating CPU sets
.SH SYNOPSIS
.nf
.B #define _GNU_SOURCE
.B #include <sched.h>
.sp
.BI "void CPU_ZERO(cpu_set_t *" set );
.sp
.BI "void CPU_SET(int " cpu ", cpu_set_t *" set );
.BI "void CPU_CLR(int " cpu ", cpu_set_t *" set );
.BI "int  CPU_ISSET(int " cpu ", cpu_set_t *" set );
.sp
.BI "void CPU_COUNT(cpu_set_t *" set );
.sp
.BI "void CPU_AND(cpu_set_t *" destset , 
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.BI "void CPU_OR(cpu_set_t *" destset , 
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.BI "void CPU_XOR(cpu_set_t *" destset , 
.BI "             cpu_set_t *" srcset1 ", cpu_set_t *" srcset2 );
.sp
.BI "int  CPU_EQUAL(cpu_set_t *" set1 ", cpu_set_t *" set2 );
.fi
.SH DESCRIPTION
The
.I cpu_set_t
data structure represents a set of CPUs.
CPU sets are used by
.BR sched_setaffinity (2)
and similar interfaces.

The following macros are provided to operate on the CPU set
.IR set :
.TP 16
.BR CPU_ZERO ()
Clears
.IR set ,
so that it contains no CPUs.
.TP
.BR CPU_SET ()
Add CPU
.I cpu
to
.IR set .
.TP
.BR CPU_CLR ()
Remove CPU
.I cpu
from
.IR set .
.TP
.BR CPU_ISSET ()
Test to see if CPU
.I cpu
is a member of
.IR set .
.TP
.BR CPU_COUNT ()
Return the number of CPUs in
.IR set .
.PP
Where a
.I cpu
argument is specified, it should not produce side effects,
since the above macros may evaluate the argument more than once.
.PP
The first available CPU on the system corresponds to a
.I cpu
value of 0, the next CPU corresponds to a
.I cpu
value of 1, and so on.
The constant
.B CPU_SETSIZE
(currently 1024) specifies a value one greater than the maximum CPU
number that can be stored in a CPU set.

The following macros perform logical operations on SPU sets:
.TP 16
.BR CPU_AND ()
Store the logical AND of the sets
.I srcset1
and
.I srcset2
in
.I destset
(which may be one of the source sets).
.TP
.BR CPU_OR ()
Store the logical OR of the sets
.I srcset1
and
.I srcset2
in
.I destset
(which may be one of the source sets).
.TP
.BR CPU_XOR ()
Store the logical XOR of the sets
.I srcset1
and
.I srcset2
in
.I destset
(which may be one of the source sets).
.TP
.BR CPU_EQUAL ()
Tests whether two CPU set contain the same CPUs.
.SH "RETURN VALUE"
.BR CPU_ISSET ()
returns non-zero if
.I cpu
is in
.IR set ;
otherwise, it returns 0.

.BR CPU_COUNT ()
returns the number of CPUs in
.IR set .

.BR CPU_EQUAL ()
returns non-zero if the two CPU sets are equal; otherwise it returns 0.

The other functions do not return a value.
.\" .SH ERRORS
.\" AFAICT, no E* errors are occur.
.SH VERSIONS
The
.BR CPU_ZERO (),
.BR CPU_SET (),
.BR CPU_CLR (),
and
.BR CPU_ISSET ()
macros were added in glibc 2.3.3.

.BR CPU_COUNT ()
first appeared in glibc 2.6.

.BR CPU_AND (),
.BR CPU_OR (),
.BR CPU_XOR (),
and
.BR CPU_EQUAL ()
first appeared in glibc 2.7.
.SH "CONFORMING TO"
These interfaces are Linux-specific.
.SH "SEE ALSO"
.BR sched_setaffinity (2),
.BR CPU_SET (3),
.BR pthread_attr_setaffinity_np (3),
.BR pthread_setaffinity_np (3),
.BR cpuset (7)
