.\" Copyright (c) 1993
.\"    The Regents of the University of California.  All rights reserved.
.\" and Copyright (c) 2020 by Alejandro Colomar <colomar.6.4.3@gmail.com>
.\"
.\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"
.TH TAILQ 3 2020-10-21 "GNU" "Linux Programmer's Manual"
.SH NAME
.Nm TAILQ_CONCAT ,
.Nm TAILQ_EMPTY ,
.Nm TAILQ_ENTRY ,
.Nm TAILQ_FIRST ,
.Nm TAILQ_FOREACH ,
.\" .Nm TAILQ_FOREACH_FROM ,
.\" .Nm TAILQ_FOREACH_FROM_SAFE ,
.Nm TAILQ_FOREACH_REVERSE ,
.\" .Nm TAILQ_FOREACH_REVERSE_FROM ,
.\" .Nm TAILQ_FOREACH_REVERSE_FROM_SAFE ,
.\" .Nm TAILQ_FOREACH_REVERSE_SAFE ,
.\" .Nm TAILQ_FOREACH_SAFE ,
.Nm TAILQ_HEAD ,
.Nm TAILQ_HEAD_INITIALIZER ,
.Nm TAILQ_INIT ,
.Nm TAILQ_INSERT_AFTER ,
.Nm TAILQ_INSERT_BEFORE ,
.Nm TAILQ_INSERT_HEAD ,
.Nm TAILQ_INSERT_TAIL ,
.Nm TAILQ_LAST ,
.Nm TAILQ_NEXT ,
.Nm TAILQ_PREV ,
.Nm TAILQ_REMOVE
.\" .Nm TAILQ_SWAP
.SH SYNOPSIS
.In sys/queue.h
.\"
.Fn TAILQ_CONCAT "TAILQ_HEAD *head1" "TAILQ_HEAD *head2" "TAILQ_ENTRY NAME"
.Fn TAILQ_EMPTY "TAILQ_HEAD *head"
.Fn TAILQ_ENTRY "TYPE"
.Fn TAILQ_FIRST "TAILQ_HEAD *head"
.Fn TAILQ_FOREACH "TYPE *var" "TAILQ_HEAD *head" "TAILQ_ENTRY NAME"
.\" .Fn TAILQ_FOREACH_FROM "TYPE *var" "TAILQ_HEAD *head" "TAILQ_ENTRY NAME"
.\" .Fn TAILQ_FOREACH_FROM_SAFE "TYPE *var" "TAILQ_HEAD *head" "TAILQ_ENTRY NAME" "TYPE *temp_var"
.Fn TAILQ_FOREACH_REVERSE "TYPE *var" "TAILQ_HEAD *head" "HEADNAME" "TAILQ_ENTRY NAME"
.\" .Fn TAILQ_FOREACH_REVERSE_FROM "TYPE *var" "TAILQ_HEAD *head" "HEADNAME" "TAILQ_ENTRY NAME"
.\" .Fn TAILQ_FOREACH_REVERSE_FROM_SAFE "TYPE *var" "TAILQ_HEAD *head" "HEADNAME" "TAILQ_ENTRY NAME" "TYPE *temp_var"
.\" .Fn TAILQ_FOREACH_REVERSE_SAFE "TYPE *var" "TAILQ_HEAD *head" "HEADNAME" "TAILQ_ENTRY NAME" "TYPE *temp_var"
.\" .Fn TAILQ_FOREACH_SAFE "TYPE *var" "TAILQ_HEAD *head" "TAILQ_ENTRY NAME" "TYPE *temp_var"
.Fn TAILQ_HEAD "HEADNAME" "TYPE"
.Fn TAILQ_HEAD_INITIALIZER "TAILQ_HEAD head"
.Fn TAILQ_INIT "TAILQ_HEAD *head"
.Fn TAILQ_INSERT_AFTER "TAILQ_HEAD *head" "TYPE *listelm" "TYPE *elm" "TAILQ_ENTRY NAME"
.Fn TAILQ_INSERT_BEFORE "TYPE *listelm" "TYPE *elm" "TAILQ_ENTRY NAME"
.Fn TAILQ_INSERT_HEAD "TAILQ_HEAD *head" "TYPE *elm" "TAILQ_ENTRY NAME"
.Fn TAILQ_INSERT_TAIL "TAILQ_HEAD *head" "TYPE *elm" "TAILQ_ENTRY NAME"
.Fn TAILQ_LAST "TAILQ_HEAD *head" "HEADNAME"
.Fn TAILQ_NEXT "TYPE *elm" "TAILQ_ENTRY NAME"
.Fn TAILQ_PREV "TYPE *elm" "HEADNAME" "TAILQ_ENTRY NAME"
.Fn TAILQ_REMOVE "TAILQ_HEAD *head" "TYPE *elm" "TAILQ_ENTRY NAME"
.\" .Fn TAILQ_SWAP "TAILQ_HEAD *head1" "TAILQ_HEAD *head2" "TYPE" "TAILQ_ENTRY NAME"
.\"
.SH DESCRIPTION
.Pp
In the macro definitions,
.Fa TYPE
is the name of a user defined structure,
that must contain a field of type
.Li TAILQ_ENTRY ,
named
.Fa NAME .
The argument
.Fa HEADNAME
is the name of a user defined structure that must be declared
using the macro
.Li TAILQ_HEAD .
.Ss Tail queues
A tail queue is headed by a structure defined by the
.Nm TAILQ_HEAD
macro.
This structure contains a pair of pointers,
one to the first element in the tail queue and the other to
the last element in the tail queue.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the tail queue.
New elements can be added to the tail queue after an existing element,
before an existing element, at the head of the tail queue,
or at the end of the tail queue.
A
.Fa TAILQ_HEAD
structure is declared as follows:
.Bd -literal -offset indent
TAILQ_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Li HEADNAME
is the name of the structure to be defined, and
.Li TYPE
is the type of the elements to be linked into the tail queue.
A pointer to the head of the tail queue can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The macro
.Nm TAILQ_HEAD_INITIALIZER
evaluates to an initializer for the tail queue
.Fa head .
.Pp
The macro
.Nm TAILQ_CONCAT
concatenates the tail queue headed by
.Fa head2
onto the end of the one headed by
.Fa head1
removing all entries from the former.
.Pp
The macro
.Nm TAILQ_EMPTY
evaluates to true if there are no items on the tail queue.
.Pp
The macro
.Nm TAILQ_ENTRY
declares a structure that connects the elements in
the tail queue.
.Pp
The macro
.Nm TAILQ_FIRST
returns the first item on the tail queue or NULL if the tail queue
is empty.
.Pp
The macro
.Nm TAILQ_FOREACH
traverses the tail queue referenced by
.Fa head
in the forward direction, assigning each element in turn to
.Fa var .
.Fa var
is set to
.Dv NULL
if the loop completes normally, or if there were no elements.
.\" .Pp
.\" The macro
.\" .Nm TAILQ_FOREACH_FROM
.\" behaves identically to
.\" .Nm TAILQ_FOREACH
.\" when
.\" .Fa var
.\" is NULL, else it treats
.\" .Fa var
.\" as a previously found TAILQ element and begins the loop at
.\" .Fa var
.\" instead of the first element in the TAILQ referenced by
.\" .Fa head .
.Pp
The macro
.Nm TAILQ_FOREACH_REVERSE
traverses the tail queue referenced by
.Fa head
in the reverse direction, assigning each element in turn to
.Fa var .
.\" .Pp
.\" The macro
.\" .Nm TAILQ_FOREACH_REVERSE_FROM
.\" behaves identically to
.\" .Nm TAILQ_FOREACH_REVERSE
.\" when
.\" .Fa var
.\" is NULL, else it treats
.\" .Fa var
.\" as a previously found TAILQ element and begins the reverse loop at
.\" .Fa var
.\" instead of the last element in the TAILQ referenced by
.\" .Fa head .
.\" .Pp
.\" The macros
.\" .Nm TAILQ_FOREACH_SAFE
.\" and
.\" .Nm TAILQ_FOREACH_REVERSE_SAFE
.\" traverse the list referenced by
.\" .Fa head
.\" in the forward or reverse direction respectively,
.\" assigning each element in turn to
.\" .Fa var .
.\" However, unlike their unsafe counterparts,
.\" .Nm TAILQ_FOREACH
.\" and
.\" .Nm TAILQ_FOREACH_REVERSE
.\" permit to both remove
.\" .Fa var
.\" as well as free it from within the loop safely without interfering with the
.\" traversal.
.\" .Pp
.\" The macro
.\" .Nm TAILQ_FOREACH_FROM_SAFE
.\" behaves identically to
.\" .Nm TAILQ_FOREACH_SAFE
.\" when
.\" .Fa var
.\" is NULL, else it treats
.\" .Fa var
.\" as a previously found TAILQ element and begins the loop at
.\" .Fa var
.\" instead of the first element in the TAILQ referenced by
.\" .Fa head .
.\" .Pp
.\" The macro
.\" .Nm TAILQ_FOREACH_REVERSE_FROM_SAFE
.\" behaves identically to
.\" .Nm TAILQ_FOREACH_REVERSE_SAFE
.\" when
.\" .Fa var
.\" is NULL, else it treats
.\" .Fa var
.\" as a previously found TAILQ element and begins the reverse loop at
.\" .Fa var
.\" instead of the last element in the TAILQ referenced by
.\" .Fa head .
.Pp
The macro
.Nm TAILQ_INIT
initializes the tail queue referenced by
.Fa head .
.Pp
The macro
.Nm TAILQ_INSERT_HEAD
inserts the new element
.Fa elm
at the head of the tail queue.
.Pp
The macro
.Nm TAILQ_INSERT_TAIL
inserts the new element
.Fa elm
at the end of the tail queue.
.Pp
The macro
.Nm TAILQ_INSERT_AFTER
inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The macro
.Nm TAILQ_INSERT_BEFORE
inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The macro
.Nm TAILQ_LAST
returns the last item on the tail queue.
If the tail queue is empty the return value is
.Dv NULL .
.Pp
The macro
.Nm TAILQ_NEXT
returns the next item on the tail queue, or NULL if this item is the last.
.Pp
The macro
.Nm TAILQ_PREV
returns the previous item on the tail queue, or NULL if this item
is the first.
.Pp
The macro
.Nm TAILQ_REMOVE
removes the element
.Fa elm
from the tail queue.
.\" .Pp
.\" The macro
.\" .Nm TAILQ_SWAP
.\" swaps the contents of
.\" .Fa head1
.\" and
.\" .Fa head2 .
.SH RETURN VALUE
.SH CONFORMING TO
Not in POSIX.1, POSIX.1-2001 or POSIX.1-2008.
Present on the BSDs.
(TAILQ functions first appeared in
.Bx 4.4 ).
.SH BUGS
.SH EXAMPLES
.Ss Tail queue example
.Bd -literal
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/queue.h>

struct entry {
    int data;
    TAILQ_ENTRY(entry) entries;             /* Tail queue. */
};

TAILQ_HEAD(tailhead, entry);

int
main(void)
{
    struct entry *n1, *n2, *n3, *np;
    struct tailhead head;                   /* Tail queue head. */
    int i;

    TAILQ_INIT(&head);                      /* Initialize the queue. */

    n1 = malloc(sizeof(struct entry));      /* Insert at the head. */
    TAILQ_INSERT_HEAD(&head, n1, entries);

    n1 = malloc(sizeof(struct entry));      /* Insert at the tail. */
    TAILQ_INSERT_TAIL(&head, n1, entries);

    n2 = malloc(sizeof(struct entry));      /* Insert after. */
    TAILQ_INSERT_AFTER(&head, n1, n2, entries);

    n3 = malloc(sizeof(struct entry));      /* Insert before. */
    TAILQ_INSERT_BEFORE(n2, n3, entries);

    TAILQ_REMOVE(&head, n2, entries);       /* Deletion. */
    free(n2);
                                            /* Forward traversal. */
    i = 0;
    TAILQ_FOREACH(np, &head, entries)
        np->data = i++;
                                            /* Reverse traversal. */
    TAILQ_FOREACH_REVERSE(np, &head, tailhead, entries)
        printf("%i\en", np->data);
                                            /* TailQ Deletion. */
    n1 = TAILQ_FIRST(&head);
    while (n1 != NULL) {
        n2 = TAILQ_NEXT(n1, entries);
        free(n1);
        n1 = n2;
    }
    TAILQ_INIT(&head);

    exit(EXIT_SUCCESS);
}
.Ed
.SH SEE ALSO
