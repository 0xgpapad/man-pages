.\" Copyright (c) 1993
.\"    The Regents of the University of California.  All rights reserved.
.\" and Copyright (c) 2020 by Alejandro Colomar <colomar.6.4.3@gmail.com>
.\"
.\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"
.TH SLIST 3 2020-10-21 "GNU" "Linux Programmer's Manual"
.SH NAME
.Nm SLIST_EMPTY ,
.Nm SLIST_ENTRY ,
.Nm SLIST_FIRST ,
.Nm SLIST_FOREACH ,
.\" .Nm SLIST_FOREACH_FROM ,
.\" .Nm SLIST_FOREACH_SAFE ,
.\" .Nm SLIST_FOREACH_FROM_SAFE ,
.Nm SLIST_HEAD ,
.Nm SLIST_HEAD_INITIALIZER ,
.Nm SLIST_INIT ,
.Nm SLIST_INSERT_AFTER ,
.Nm SLIST_INSERT_HEAD ,
.Nm SLIST_NEXT ,
.\" .Nm SLIST_REMOVE_AFTER ,
.Nm SLIST_REMOVE_HEAD ,
.Nm SLIST_REMOVE ,
.\" .Nm SLIST_SWAP ,
.SH SYNOPSIS
.Fn SLIST_EMPTY "SLIST_HEAD *head"
.Fn SLIST_ENTRY "TYPE"
.Fn SLIST_FIRST "SLIST_HEAD *head"
.Fn SLIST_FOREACH "TYPE *var" "SLIST_HEAD *head" "SLIST_ENTRY NAME"
.\" .Fn SLIST_FOREACH_FROM "TYPE *var" "SLIST_HEAD *head" "SLIST_ENTRY NAME"
.\" .Fn SLIST_FOREACH_SAFE "TYPE *var" "SLIST_HEAD *head" "SLIST_ENTRY NAME" "TYPE *temp_var"
.\" .Fn SLIST_FOREACH_FROM_SAFE "TYPE *var" "SLIST_HEAD *head" "SLIST_ENTRY NAME" "TYPE *temp_var"
.Fn SLIST_HEAD "HEADNAME" "TYPE"
.Fn SLIST_HEAD_INITIALIZER "SLIST_HEAD head"
.Fn SLIST_INIT "SLIST_HEAD *head"
.Fn SLIST_INSERT_AFTER "TYPE *listelm" "TYPE *elm" "SLIST_ENTRY NAME"
.Fn SLIST_INSERT_HEAD "SLIST_HEAD *head" "TYPE *elm" "SLIST_ENTRY NAME"
.Fn SLIST_NEXT "TYPE *elm" "SLIST_ENTRY NAME"
.\" .Fn SLIST_REMOVE_AFTER "TYPE *elm" "SLIST_ENTRY NAME"
.Fn SLIST_REMOVE_HEAD "SLIST_HEAD *head" "SLIST_ENTRY NAME"
.Fn SLIST_REMOVE "SLIST_HEAD *head" "TYPE *elm" "TYPE" "SLIST_ENTRY NAME"
.\" .Fn SLIST_SWAP "SLIST_HEAD *head1" "SLIST_HEAD *head2" "SLIST_ENTRY NAME"
.\"
.SH DESCRIPTION
.Ss Singly-linked lists
A singly-linked list is headed by a structure defined by the
.Nm SLIST_HEAD
macro.
This structure contains a single pointer to the first element
on the list.
The elements are singly linked for minimum space and pointer manipulation
overhead at the expense of O(n) removal for arbitrary elements.
New elements can be added to the list after an existing element or
at the head of the list.
An
.Fa SLIST_HEAD
structure is declared as follows:
.Bd -literal -offset indent
SLIST_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and
.Fa TYPE
is the type of the elements to be linked into the list.
A pointer to the head of the list can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The macro
.Nm SLIST_HEAD_INITIALIZER
evaluates to an initializer for the list
.Fa head .
.Pp
The macro
.Nm SLIST_EMPTY
evaluates to true if there are no elements in the list.
.Pp
The macro
.Nm SLIST_ENTRY
declares a structure that connects the elements in
the list.
.Pp
The macro
.Nm SLIST_FIRST
returns the first element in the list or NULL if the list is empty.
.Pp
The macro
.Nm SLIST_FOREACH
traverses the list referenced by
.Fa head
in the forward direction, assigning each element in
turn to
.Fa var .
.\" .Pp
.\" The macro
.\" .Nm SLIST_FOREACH_FROM
.\" behaves identically to
.\" .Nm SLIST_FOREACH
.\" when
.\" .Fa var
.\" is NULL, else it treats
.\" .Fa var
.\" as a previously found SLIST element and begins the loop at
.\" .Fa var
.\" instead of the first element in the SLIST referenced by
.\" .Fa head .
.\" .Pp
.\" The macro
.\" .Nm SLIST_FOREACH_SAFE
.\" traverses the list referenced by
.\" .Fa head
.\" in the forward direction, assigning each element in
.\" turn to
.\" .Fa var .
.\" However, unlike
.\" .Fn SLIST_FOREACH
.\" here it is permitted to both remove
.\" .Fa var
.\" as well as free it from within the loop safely without interfering with the
.\" traversal.
.\" .Pp
.\" The macro
.\" .Nm SLIST_FOREACH_FROM_SAFE
.\" behaves identically to
.\" .Nm SLIST_FOREACH_SAFE
.\" when
.\" .Fa var
.\" is NULL, else it treats
.\" .Fa var
.\" as a previously found SLIST element and begins the loop at
.\" .Fa var
.\" instead of the first element in the SLIST referenced by
.\" .Fa head .
.Pp
The macro
.Nm SLIST_INIT
initializes the list referenced by
.Fa head .
.Pp
The macro
.Nm SLIST_INSERT_HEAD
inserts the new element
.Fa elm
at the head of the list.
.Pp
The macro
.Nm SLIST_INSERT_AFTER
inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The macro
.Nm SLIST_NEXT
returns the next element in the list.
.\" .Pp
.\" The macro
.\" .Nm SLIST_REMOVE_AFTER
.\" removes the element after
.\" .Fa elm
.\" from the list.
.\" Unlike
.\" .Fa SLIST_REMOVE ,
.\" this macro does not traverse the entire list.
.Pp
The macro
.Nm SLIST_REMOVE_HEAD
removes the element
.Fa elm
from the head of the list.
For optimum efficiency,
elements being removed from the head of the list should explicitly use
this macro instead of the generic
.Fa SLIST_REMOVE
macro.
.Pp
The macro
.Nm SLIST_REMOVE
removes the element
.Fa elm
from the list.
.\" .Pp
.\" The macro
.\" .Nm SLIST_SWAP
.\" swaps the contents of
.\" .Fa head1
.\" and
.\" .Fa head2 .
.Pp
See the EXAMPLES section below for an example program using a singly-linked list.
.SH RETURN VALUE
.SH CONFORMING TO
.SH BUGS
.SH EXAMPLES
.SH SEE ALSO
