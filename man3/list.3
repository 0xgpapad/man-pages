.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\" and Copyright (c) 2020 by Alejandro Colomar <colomar.6.4.3@gmail.com>
.\"
.\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"
.TH LIST 3 2020-10-19 "GNU" "Linux Programmer's Manual"
.SH NAME
.Nm LIST_EMPTY ,
.Nm LIST_ENTRY ,
.Nm LIST_FIRST ,
.Nm LIST_FOREACH ,
.\" .Nm LIST_FOREACH_FROM ,
.\" .Nm LIST_FOREACH_SAFE ,
.\" .Nm LIST_FOREACH_FROM_SAFE ,
.Nm LIST_HEAD ,
.Nm LIST_HEAD_INITIALIZER ,
.Nm LIST_INIT ,
.Nm LIST_INSERT_AFTER ,
.Nm LIST_INSERT_BEFORE ,
.Nm LIST_INSERT_HEAD ,
.Nm LIST_NEXT ,
.\" .Nm LIST_PREV ,
.Nm LIST_REMOVE ,
.\" .Nm LIST_SWAP ,
.SH SYNOPSIS
.Fn LIST_EMPTY "LIST_HEAD *head"
.Fn LIST_ENTRY "TYPE"
.Fn LIST_FIRST "LIST_HEAD *head"
.Fn LIST_FOREACH "TYPE *var" "LIST_HEAD *head" "LIST_ENTRY NAME"
.\" .Fn LIST_FOREACH_FROM "TYPE *var" "LIST_HEAD *head" "LIST_ENTRY NAME"
.\" .Fn LIST_FOREACH_SAFE "TYPE *var" "LIST_HEAD *head" "LIST_ENTRY NAME" "TYPE *temp_var"
.\" .Fn LIST_FOREACH_FROM_SAFE "TYPE *var" "LIST_HEAD *head" "LIST_ENTRY NAME" "TYPE *temp_var"
.Fn LIST_HEAD "HEADNAME" "TYPE"
.Fn LIST_HEAD_INITIALIZER "LIST_HEAD head"
.Fn LIST_INIT "LIST_HEAD *head"
.Fn LIST_INSERT_AFTER "TYPE *listelm" "TYPE *elm" "LIST_ENTRY NAME"
.Fn LIST_INSERT_BEFORE "TYPE *listelm" "TYPE *elm" "LIST_ENTRY NAME"
.Fn LIST_INSERT_HEAD "LIST_HEAD *head" "TYPE *elm" "LIST_ENTRY NAME"
.Fn LIST_NEXT "TYPE *elm" "LIST_ENTRY NAME"
.\" .Fn LIST_PREV "TYPE *elm" "LIST_HEAD *head" "TYPE" "LIST_ENTRY NAME"
.Fn LIST_REMOVE "TYPE *elm" "LIST_ENTRY NAME"
.\" .Fn LIST_SWAP "LIST_HEAD *head1" "LIST_HEAD *head2" "TYPE" "LIST_ENTRY NAME"
.\"
.SH DESCRIPTION
.Ss Lists
A list is headed by a structure defined by the
.Nm LIST_HEAD
macro.
This structure contains a single pointer to the first element
on the list.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the list.
New elements can be added to the list after an existing element,
before an existing element, or at the head of the list.
A
.Fa LIST_HEAD
structure is declared as follows:
.Bd -literal -offset indent
LIST_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and
.Fa TYPE
is the type of the elements to be linked into the list.
A pointer to the head of the list can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The macro
.Nm LIST_HEAD_INITIALIZER
evaluates to an initializer for the list
.Fa head .
.Pp
The macro
.Nm LIST_EMPTY
evaluates to true if there are no elements in the list.
.Pp
The macro
.Nm LIST_ENTRY
declares a structure that connects the elements in
the list.
.Pp
The macro
.Nm LIST_FIRST
returns the first element in the list or NULL if the list
is empty.
.Pp
The macro
.Nm LIST_FOREACH
traverses the list referenced by
.Fa head
in the forward direction, assigning each element in turn to
.Fa var .
.\" .Pp
.\" The macro
.\" .Nm LIST_FOREACH_FROM
.\" behaves identically to
.\" .Nm LIST_FOREACH
.\" when
.\" .Fa var
.\" is NULL, else it treats
.\" .Fa var
.\" as a previously found LIST element and begins the loop at
.\" .Fa var
.\" instead of the first element in the LIST referenced by
.\" .Fa head .
.\" .Pp
.\" The macro
.\" .Nm LIST_FOREACH_SAFE
.\" traverses the list referenced by
.\" .Fa head
.\" in the forward direction, assigning each element in turn to
.\" .Fa var .
.\" However, unlike
.\" .Fn LIST_FOREACH
.\" here it is permitted to both remove
.\" .Fa var
.\" as well as free it from within the loop safely without interfering with the
.\" traversal.
.\" .Pp
.\" The macro
.\" .Nm LIST_FOREACH_FROM_SAFE
.\" behaves identically to
.\" .Nm LIST_FOREACH_SAFE
.\" when
.\" .Fa var
.\" is NULL, else it treats
.\" .Fa var
.\" as a previously found LIST element and begins the loop at
.\" .Fa var
.\" instead of the first element in the LIST referenced by
.\" .Fa head .
.Pp
The macro
.Nm LIST_INIT
initializes the list referenced by
.Fa head .
.Pp
The macro
.Nm LIST_INSERT_HEAD
inserts the new element
.Fa elm
at the head of the list.
.Pp
The macro
.Nm LIST_INSERT_AFTER
inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The macro
.Nm LIST_INSERT_BEFORE
inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The macro
.Nm LIST_NEXT
returns the next element in the list, or NULL if this is the last.
.\" .Pp
.\" The macro
.\" .Nm LIST_PREV
.\" returns the previous element in the list, or NULL if this is the first.
.\" List
.\" .Fa head
.\" must contain element
.\" .Fa elm .
.Pp
The macro
.Nm LIST_REMOVE
removes the element
.Fa elm
from the list.
.\" .Pp
.\" The macro
.\" .Nm LIST_SWAP
.\" swaps the contents of
.\" .Fa head1
.\" and
.\" .Fa head2 .
.Pp
See the EXAMPLES section below for an example program using a linked list.
.SH RETURN VALUE
.SH CONFORMING TO
.SH BUGS
.SH EXAMPLES
.Ss List example
.Bd -literal
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/queue.h>

struct entry {
    int data;
    LIST_ENTRY(entry) entries;              /* List. */
};

LIST_HEAD(listhead, entry);

int
main(void)
{
    struct entry    *n1, *n2, *n3, *np;
    struct listhead head;                   /* List head. */
    int     i;

    LIST_INIT(&head);                       /* Initialize the list. */

    n1 = malloc(sizeof(struct entry));      /* Insert at the head. */
    LIST_INSERT_HEAD(&head, n1, entries);

    n2 = malloc(sizeof(struct entry));      /* Insert after. */
    LIST_INSERT_AFTER(n1, n2, entries);

    n3 = malloc(sizeof(struct entry));      /* Insert before. */
    LIST_INSERT_BEFORE(n2, n3, entries);

    i = 0;                                  /* Forward traversal. */
    LIST_FOREACH(np, &head, entries)
        np->data = i++;

    LIST_REMOVE(n2, entries);               /* Deletion. */
    free(n2);
                                            /* Forward traversal. */
    LIST_FOREACH(np, &head, entries)
        printf("%i\en", np->data);
                                            /* List Deletion. */
    n1 = LIST_FIRST(&head);
    while (n1 != NULL) {
        n2 = LIST_NEXT(n1, entries);
        free(n1);
        n1 = n2;
    }
    LIST_INIT(&head);

    exit(EXIT_SUCCESS);
}
.Ed
.SH SEE ALSO
