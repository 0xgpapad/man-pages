.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\"
.\" @(#)rpc.3n	2.4 88/08/08 4.0 RPCSRC; from 1.19 88/06/24 SMI
.\"
.\" FIXME -- change this page to use modern C prototypes
.\"
.TH RPC 3 2007-11-15 "" "Linux Programmer's Manual"
.SH NAME
rpc \- library routines for remote procedure calls
.SH "SYNOPSIS AND DESCRIPTION"
These routines allow C programs to make procedure
calls on other machines across the network.
First, the client calls a procedure to send a
data packet to the server.
Upon receipt of the packet, the server calls a dispatch routine
to perform the requested service, and then sends back a
reply.
Finally, the procedure call returns to the client.
.\" .LP
.\" We don't have an rpc_secure.3 page in the set at the moment -- MTK, 19 Sep 05
.\" Routines that are used for Secure RPC (DES authentication) are described in
.\" .BR rpc_secure (3).
.\" Secure RPC can be used only if DES encryption is available.
.LP
.ft B
.nf
.sp .5
#include <rpc/rpc.h>
.fi
.ft R
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
auth_destroy(auth)
AUTH *auth;
.fi
.ft R
.IP
A macro that destroys the authentication information associated with
.IR auth .
Destruction usually involves deallocation of private data
structures.
The use of
.I auth
is undefined after calling
.BR auth_destroy ().
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
AUTH *
authnone_create()
.fi
.ft R
.IP
Create and returns an
RPC
authentication handle that passes non-usable authentication
information with each remote procedure call.
This is the
default authentication used by
RPC.
.if t .ne 10
.LP
.ft B
.nf
.sp .5
AUTH *
authunix_create(host, uid, gid, len, aup_gids)
char *host;
int uid, gid, len, *aup_gids;
.fi
.ft R
.IP
Create and return an
RPC
authentication handle that contains
authentication information.
The parameter
.I host
is the name of the machine on which the information was
created;
.I uid
is the user's user
ID;
.I gid
is the user's current group
ID;
.I len
and
.I aup_gids
refer to a counted array of groups to which the user belongs.
It is easy to impersonate a user.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
AUTH *
authunix_create_default()
.fi
.ft R
.IP
Calls
.BR authunix_create ()
with the appropriate parameters.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
char *host;
unsigned long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results.
This routine returns zero if it succeeds, or the value of
.B "enum clnt_stat"
cast to an integer if it fails.
The routine
.BR clnt_perrno ()
is handy for translating failure statuses into messages.
.IP
Warning: calling remote procedures with this routine
uses
UDP/IP
as a transport; see
.BR clntudp_create ()
for restrictions.
You do not have control of timeouts or authentication using
this routine.
.br
.if t .ne 16
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_broadcast(prognum, versnum, procnum, inproc, in, outproc,
               out, eachresult)
unsigned long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
resultproc_t eachresult;
.fi
.ft R
.IP
Like
.BR callrpc (),
except the call message is broadcast to all locally
connected broadcast nets.
Each time it receives a
response, this routine calls
.BR eachresult (),
whose form is:
.IP
.RS 1i
.ft B
.nf
eachresult(out, addr)
char *out;
struct sockaddr_in *addr;
.ft R
.fi
.RE
.IP
where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast (),
except that the remote procedure's output is decoded there;
.I addr
points to the address of the machine that sent the results.
If
.BR eachresult ()
returns zero,
.BR clnt_broadcast ()
waits for more replies; otherwise it returns with appropriate
status.
.IP
Warning: broadcast sockets are limited in size to the
maximum transfer unit of the data link.
For ethernet,
this value is 1500 bytes.
.br
.if t .ne 13
.LP
.ft B
.nf
.sp .5
enum clnt_stat
clnt_call(clnt, procnum, inproc, in, outproc, out, tout)
CLIENT *clnt;
unsigned long procnum;
xdrproc_t inproc, outproc;
char *in, *out;
struct timeval tout;
.fi
.ft R
.IP
A macro that calls the remote procedure
.I procnum
associated with the client handle,
.IR clnt ,
which is obtained with an
RPC
client creation routine such as
.BR clnt_create ().
The parameter
.I in
is the address of the procedure's argument(s), and
.I out
is the address of where to place the result(s);
.I inproc
is used to encode the procedure's parameters, and
.I outproc
is used to decode the procedure's results;
.I tout
is the time allowed for results to come back.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
clnt_destroy(clnt)
CLIENT *clnt;
.fi
.ft R
.IP
A macro that destroys the client's
RPC
handle.
Destruction usually involves deallocation
of private data structures, including
.I clnt
itself.
Use of
.I clnt
is undefined after calling
.BR clnt_destroy ().
If the
RPC
library opened the associated socket, it will close it also.
Otherwise, the socket remains open.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
CLIENT *
clnt_create(host, prog, vers, proto)
char *host;
unsigned long prog, vers;
char *proto;
.fi
.ft R
.IP
Generic client creation routine.
.I host
identifies the name of the remote host where the server
is located.
.I proto
indicates which kind of transport protocol to use.
The currently supported values for this field are \(lqudp\(rq
and \(lqtcp\(rq.
Default timeouts are set, but can be modified using
.BR clnt_control ().
.IP
Warning: Using
UDP
has its shortcomings.
Since
UDP-based
RPC
messages can only hold up to 8 Kbytes of encoded data,
this transport cannot be used for procedures that take
large arguments or return huge results.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
bool_t
clnt_control(cl, req, info)
CLIENT *cl;
int req;
char *info;
.fi
.ft R
.IP
A macro used to change or retrieve various information
about a client object.
.I req
indicates the type of operation, and
.I info
is a pointer to the information.
For both
UDP
and
TCP,
the supported values of
.I req
and their argument types and what they do are:
.IP
.nf
.ta +2.0i +2.0i +2.0i
CLSET_TIMEOUT	struct timeval	set total timeout
CLGET_TIMEOUT	struct timeval	get total timeout
.fi
.IP
Note: if you set the timeout using
.BR clnt_control (),
the timeout parameter passed to
.BR clnt_call ()
will be ignored in all future calls.
.IP
.nf
CLGET_SERVER_ADDR	struct sockaddr_in 	get server's address
.fi
.br
.IP
The following operations are valid for
UDP
only:
.IP
.nf
.ta +2.0i +2.0i +2.0i
CLSET_RETRY_TIMEOUT	struct timeval	set the retry timeout
CLGET_RETRY_TIMEOUT	struct timeval	get the retry timeout
.fi
.br
.IP
The retry timeout is the time that
"UDP RPC"
waits for the server to reply before
retransmitting the request.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
clnt_freeres(clnt, outproc, out)
CLIENT *clnt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
A macro that frees any data allocated by the
RPC/XDR
system when it decoded the results of an
RPC
call.
The parameter
.I out
is the address of the results, and
.I outproc
is the
XDR
routine describing the results.
This routine returns one if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
void
clnt_geterr(clnt, errp)
CLIENT *clnt;
struct rpc_err *errp;
.fi
.ft R
.IP
A macro that copies the error structure out of the client
handle
to the structure at address
.IR errp .
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_pcreateerror(s)
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating
why a client
RPC
handle could not be created.
The message is prepended with string
.I s
and a colon.
Used when a
.BR clnt_create (),
.BR clntraw_create (),
.BR clnttcp_create (),
or
.BR clntudp_create ()
call fails.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
clnt_perrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Print a message to standard error corresponding
to the condition indicated by
.IR stat .
Used after
.BR callrpc ().
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
clnt_perror(clnt, s)
CLIENT *clnt;
char *s;
.fi
.ft R
.IP
Print a message to standard error indicating why an
RPC
call failed;
.I clnt
is the handle used to do the call.
The message is prepended with string
.I s
and a colon.
Used after
.BR clnt_call ().
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_spcreateerror(s)
char *s;
.fi
.ft R
.IP
Like
.BR clnt_pcreateerror (),
except that it returns a string
instead of printing to the standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
char *
clnt_sperrno(stat)
enum clnt_stat stat;
.fi
.ft R
.IP
Take the same arguments as
.BR clnt_perrno (),
but instead of sending a message to the standard error
indicating why an
RPC
call failed, return a pointer to a string which contains
the message.
The string ends with a
NEWLINE.
.IP
.BR clnt_sperrno ()
is used instead of
.BR clnt_perrno ()
if the program does not have a standard error (as a program
running as a server quite likely does not), or if the
programmer
does not want the message to be output with
.BR printf (3),
or if a message format different than that supported by
.BR clnt_perrno ()
is to be used.
Note: unlike
.BR clnt_sperror ()
and
.BR clnt_spcreaterror (),
.BR clnt_sperrno ()
returns pointer to static data, but the
result will not get overwritten on each call.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
char *
clnt_sperror(rpch, s)
CLIENT *rpch;
char *s;
.fi
.ft R
.IP
Like
.BR clnt_perror (),
except that (like
.BR clnt_sperrno ())
it returns a string instead of printing to standard error.
.IP
Bugs: returns pointer to static data that is overwritten
on each call.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
CLIENT *
clntraw_create(prognum, versnum)
unsigned long prognum, versnum;
.fi
.ft R
.IP
This routine creates a toy
RPC
client for the remote program
.IR prognum ,
version
.IR versnum .
The transport used to pass messages to the service is
actually a buffer within the process's address space, so the
corresponding
RPC
server should live in the same address space; see
.BR svcraw_create ().
This allows simulation of
RPC
and acquisition of
RPC
overheads, such as round trip times, without any
kernel interference.
This routine returns
NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
CLIENT *
clnttcp_create(addr, prognum, versnum, sockp, sendsz, recvsz)
struct sockaddr_in *addr;
unsigned long prognum, versnum;
int *sockp;
unsigned int sendsz, recvsz;
.fi
.ft R
.IP
This routine creates an
RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
TCP/IP
as a transport.
The remote program is located at Internet
address
.IR *addr .
If
.\"The following in-line font conversion is necessary for the hyphen indicator
\fB\%addr\->sin_port\fR
is zero, then it is set to the actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information).
The parameter
.I sockp
is a socket; if it is
.BR RPC_ANYSOCK ,
then this routine opens a new one and sets
.IR sockp .
Since
TCP-based
RPC
uses buffered
I/O,
the user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of zero choose suitable defaults.
This routine returns
NULL
if it fails.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
CLIENT *
clntudp_create(addr, prognum, versnum, wait, sockp)
struct sockaddr_in *addr;
unsigned long prognum, versnum;
struct timeval wait;
int *sockp;
.fi
.ft R
.IP
This routine creates an
RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses use
UDP/IP
as a transport.
The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information).
The parameter
.I sockp
is a socket; if it is
.BR RPC_ANYSOCK ,
then this routine opens a new one and sets
.IR sockp .
The
UDP
transport resends the call message in intervals of
.I wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call ().
.IP
Warning: since
UDP-based
RPC
messages can only hold up to 8 Kbytes
of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
CLIENT *
clntudp_bufcreate(addr, prognum, versnum, wait, sockp, sendsize,
                  recosize)
struct sockaddr_in *addr;
unsigned long prognum, versnum;
struct timeval wait;
int *sockp;
unsigned int sendsize;
unsigned int recosize;
.fi
.ft R
.IP
This routine creates an
RPC
client for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses use
UDP/IP
as a transport.
The remote program is located at Internet
address
.IR addr .
If
\fB\%addr\->sin_port\fR
is zero, then it is set to actual port that the remote
program is listening on (the remote
.B portmap
service is consulted for this information).
The parameter
.I sockp
is a socket; if it is
.BR RPC_ANYSOCK ,
then this routine opens a new one and sets
.BR sockp .
The
UDP
transport resends the call message in intervals of
.I wait
time until a response is received or until the call times
out.
The total time for the call to time out is specified by
.BR clnt_call ().
.IP
This allows the user to specify the maximum packet size for sending and receiving
UDP-based
RPC
messages.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
get_myaddress(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
Stuff the machine's
IP
address into
.IR *addr ,
without consulting the library routines that deal with
.IR /etc/hosts .
The port number is always set to
.BR htons(PMAPPORT) .
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
struct pmaplist *
pmap_getmaps(addr)
struct sockaddr_in *addr;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns a list of the current
RPC
program-to-port mappings
on the host located at
IP
address
.IR *addr .
This routine can return
NULL.
The command
.IR "rpcinfo\ \-p"
uses this routine.
.br
.if t .ne 12
.LP
.ft B
.nf
.sp .5
unsigned short
pmap_getport(addr, prognum, versnum, protocol)
struct sockaddr_in *addr;
unsigned long prognum, versnum;
unsigned int protocol;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which returns the port number
on which waits a service that supports program number
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.B
IPPROTO_UDP
or
.BR IPPROTO_TCP .
A return value of zero means that the mapping does not exist
or that
the
RPC
system failed to contact the remote
.B portmap
service.
In the latter case, the global variable
.BR rpc_createerr ()
contains the
RPC
status.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
enum clnt_stat
pmap_rmtcall(addr, prognum, versnum, procnum, inproc, in,
             outproc, out, tout, portp)
struct sockaddr_in *addr;
unsigned long prognum, versnum, procnum;
char *in, *out;
xdrproc_t inproc, outproc;
struct timeval tout;
unsigned long *portp;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which instructs
.B portmap
on the host at
IP
address
.I *addr
to make an
RPC
call on your behalf to a procedure on that host.
The parameter
.I *portp
will be modified to the program's port number if the
procedure
succeeds.
The definitions of other parameters are discussed
in
.BR callrpc ()
and
.BR clnt_call ().
This procedure should be used for a \(lqping\(rq and nothing
else.
See also
.BR clnt_broadcast ().
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
pmap_set(prognum, versnum, protocol, port)
unsigned long prognum, versnum;
unsigned int protocol;
unsigned short port;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which establishes a mapping between the triple
.RI [ prognum , versnum , protocol\fR]
and
.I port
on the machine's
.B portmap
service.
The value of
.I protocol
is most likely
.B
IPPROTO_UDP
or
.BR IPPROTO_TCP .
This routine returns one if it succeeds, zero otherwise.
Automatically done by
.BR svc_register ().
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
pmap_unset(prognum, versnum)
unsigned long prognum, versnum;
.fi
.ft R
.IP
A user interface to the
.B portmap
service, which destroys all mapping between the triple
.RI [ prognum , versnum , *\fR]
and
.B ports
on the machine's
.B portmap
service.
This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 15
.LP
.ft B
.nf
.sp .5
registerrpc(prognum, versnum, procnum, procname, inproc, outproc)
unsigned long prognum, versnum, procnum;
char *(*procname) () ;
xdrproc_t inproc, outproc;
.fi
.ft R
.IP
Register procedure
.I procname
with the
RPC
service package.
If a request arrives for program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
.I procname
is called with a pointer to its parameter(s);
.I progname
should return a pointer to its static result(s);
.I inproc
is used to decode the parameters while
.I outproc
is used to encode the results.
This routine returns zero if the registration succeeded, \-1
otherwise.
.IP
Warning: remote procedures registered in this form
are accessed using the
UDP/IP
transport; see
.BR svcudp_create ()
for restrictions.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
struct rpc_createerr     rpc_createerr;
.fi
.ft R
.IP
A global variable whose value is set by any
RPC
client creation routine
that does not succeed.
Use the routine
.BR clnt_pcreateerror ()
to print the reason why.
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void svc_destroy(xprt)
SVCXPRT *
xprt;
.fi
.ft R
.IP
A macro that destroys the
RPC
service transport handle,
.IR xprt .
Destruction usually involves deallocation
of private data structures, including
.I xprt
itself.
Use of
.I xprt
is undefined after calling this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
fd_set svc_fdset;
.fi
.ft R
.IP
A global variable reflecting the
RPC
service side's
read file descriptor bit mask; it is suitable as a parameter
to the
.BR select (2)
system call.
This is only of interest
if a service implementor does not call
.BR svc_run (),
but rather does his own asynchronous event processing.
This variable is read-only (do not pass its address to
.BR select (2)!),
yet it may change after calls to
.BR svc_getreqset ()
or any creation routines.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
int svc_fds;
.fi
.ft R
.IP
Similar to
.BR svc_fdset ,
but limited to 32 descriptors.
This interface is obsoleted by
.BR svc_fdset .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_freeargs(xprt, inproc, in)
SVCXPRT *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that frees any data allocated by the
RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs ().
This routine returns 1 if the results were successfully
freed,
and zero otherwise.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
svc_getargs(xprt, inproc, in)
SVCXPRT *xprt;
xdrproc_t inproc;
char *in;
.fi
.ft R
.IP
A macro that decodes the arguments of an
RPC
request
associated with the
RPC
service transport handle,
.IR xprt .
The parameter
.I in
is the address where the arguments will be placed;
.I inproc
is the
XDR
routine used to decode the arguments.
This routine returns one if decoding succeeds, and zero
otherwise.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
struct sockaddr_in *
svc_getcaller(xprt)
SVCXPRT *xprt;
.fi
.ft R
.IP
The approved way of getting the network address of the caller
of a procedure associated with the
RPC
service transport handle,
.IR xprt .
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_getreqset(rdfds)
fd_set *rdfds;
.fi
.ft R
.IP
This routine is only of interest if a service implementor
does not call
.BR svc_run (),
but instead implements custom asynchronous event processing.
It is called when the
.BR select (2)
system call has determined that an
RPC
request has arrived on some
RPC
socket(s);
.I rdfds
is the resultant read file descriptor bit mask.
The routine returns when all sockets associated with the
value of
.I rdfds
have been serviced.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_getreq(rdfds)
int rdfds;
.fi
.ft R
.IP
Similar to
.BR svc_getreqset (),
but limited to 32 descriptors.
This interface is obsoleted by
.BR svc_getreqset ().
.br
.if t .ne 17
.LP
.ft B
.nf
.sp .5
svc_register(xprt, prognum, versnum, dispatch, protocol)
SVCXPRT *xprt;
unsigned long prognum, versnum;
void (*dispatch) ();
unsigned long protocol;
.fi
.ft R
.IP
Associates
.I prognum
and
.I versnum
with the service dispatch procedure,
.IR dispatch .
If
.I protocol
is zero, the service is not registered with the
.B portmap
service.
If
.I protocol
is nonzero, then a mapping of the triple
.RI [ prognum , versnum , protocol\fR]
to
\fB\%xprt\->xp_port\fR
is established with the local
.B portmap
service (generally
.I protocol
is zero,
.B
IPPROTO_UDP
or
.B
IPPROTO_TCP
).
The procedure
.I dispatch
has the following form:
.RS 1i
.ft B
.nf
dispatch(request, xprt)
struct svc_req *request;
SVCXPRT *xprt;
.ft R
.fi
.RE
.IP
The
.BR svc_register ()
routine returns one if it succeeds, and zero otherwise.
.br
.if t .ne 6
.LP
.ft B
.nf
.sp .5
svc_run()
.fi
.ft R
.IP
This routine never returns.
It waits for
RPC
requests to arrive, and calls the appropriate service
procedure using
.BR svc_getreq ()
when one arrives.
This procedure is usually waiting for a
.BR select (2)
system call to return.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
svc_sendreply(xprt, outproc, out)
SVCXPRT *xprt;
xdrproc_t outproc;
char *out;
.fi
.ft R
.IP
Called by an
RPC
service's dispatch routine to send the results of a
remote procedure call.
The parameter
.I xprt
is the request's associated transport handle;
.I outproc
is the
XDR
routine which is used to encode the results; and
.I out
is the address of the results.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svc_unregister(prognum, versnum)
unsigned long prognum, versnum;
.fi
.ft R
.IP
Remove all mapping of the double
.RI [ prognum , versnum ]
to dispatch routines, and of the triple
.RI [ prognum , versnum , *\fR]
to port number.
.br
.if t .ne 9
.LP
.ft B
.nf
.sp .5
void
svcerr_auth(xprt, why)
SVCXPRT *xprt;
enum auth_stat why;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to an authentication error.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_decode(xprt)
SVCXPRT *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that cannot successfully
decode its parameters.
See also
.BR svc_getargs ().
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noproc(xprt)
SVCXPRT *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that does not implement
the procedure number that the caller requests.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_noprog(xprt)
SVCXPRT *xprt;
.fi
.ft R
.IP
Called when the desired program is not registered with the
RPC
package.
Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_progvers(xprt)
SVCXPRT *xprt;
.fi
.ft R
.IP
Called when the desired version of a program is not registered
with the
RPC
package.
Service implementors usually do not need this routine.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
svcerr_systemerr(xprt)
SVCXPRT *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine when it detects a system
error
not covered by any particular protocol.
For example, if a service can no longer allocate storage,
it may call this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
svcerr_weakauth(xprt)
SVCXPRT *xprt;
.fi
.ft R
.IP
Called by a service dispatch routine that refuses to perform
a remote procedure call due to insufficient
authentication parameters.
The routine calls
.BR "svcerr_auth(xprt, AUTH_TOOWEAK)" .
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
SVCXPRT *
svcfd_create(fd, sendsize, recvsize)
int fd;
unsigned int sendsize;
unsigned int recvsize;
.fi
.ft R
.IP
Create a service on top of any open descriptor.
Typically, this descriptor is a connected socket for a stream protocol such
as
TCP.
.I sendsize
and
.I recvsize
indicate sizes for the send and receive buffers.
If they are
zero, a reasonable default is chosen.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
SVCXPRT *
svcraw_create()
.fi
.ft R
.IP
This routine creates a toy
RPC
service transport, to which it returns a pointer.
The transport is really a buffer within the process's address space,
so the corresponding
RPC
client should live in the same
address space;
see
.BR clntraw_create ().
This routine allows simulation of
RPC
and acquisition of
RPC
overheads (such as round trip times), without any kernel
interference.
This routine returns
NULL
if it fails.
.br
.if t .ne 11
.LP
.ft B
.nf
.sp .5
SVCXPRT *
svctcp_create(sock, send_buf_size, recv_buf_size)
int sock;
unsigned int send_buf_size, recv_buf_size;
.fi
.ft R
.IP
This routine creates a
TCP/IP-based
RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR RPC_ANYSOCK ,
in which case a new socket is created.
If the socket is not bound to a local
TCP
port, then this routine binds it to an arbitrary port.
Upon completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
NULL
if it fails.
Since
TCP-based
RPC
uses buffered
I/O,
users may specify the size of buffers; values of zero
choose suitable defaults.
.br
.if t .ne 10
.LP
.ft B
.nf
.sp .5
SVCXPRT *
svcudp_bufcreate(sock, sendsize, recosize)
int sock;
unsigned int sendsize, recosize;
.fi
.ft R
.IP
This routine creates a
UDP/IP-based
RPC
service transport, to which it returns a pointer.
The transport is associated with the socket
.IR sock ,
which may be
.BR RPC_ANYSOCK ,
in which case a new socket is created.
If the socket is not bound to a local
UDP
port, then this routine binds it to an arbitrary port.
Upon completion,
\fB\%xprt\->xp_sock\fR
is the transport's socket descriptor, and
\fB\%xprt\->xp_port\fR
is the transport's port number.
This routine returns
NULL
if it fails.
.IP
This allows the user to specify the maximum packet size for sending and
receiving
UDP-based
RPC messages.
.br
.if t .ne 5
.LP
.ft B
.nf
.sp .5
SVCXPRT *
svcudp_create(sock)
int sock;
.fi
.ft R
.IP
This call is equivalent to
\fIsvcudp_bufcreate(sock,SZ,SZ)\fP
for some default size \fISZ\fP.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_accepted_reply(xdrs, ar)
XDR *xdrs;
struct accepted_reply *ar;
.fi
.ft R
.IP
Used for encoding
RPC
reply messages.
This routine is useful for users who wish to generate
RPC-style
messages without using the
RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_authunix_parms(xdrs, aupp)
XDR *xdrs;
struct authunix_parms *aupp;
.fi
.ft R
.IP
Used for describing
UNIX
credentials.
This routine is useful for users
who wish to generate these credentials without using the
RPC
authentication package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
void
xdr_callhdr(xdrs, chdr)
XDR *xdrs;
struct rpc_msg *chdr;
.fi
.ft R
.IP
Used for describing
RPC
call header messages.
This routine is useful for users who wish to generate
RPC-style
messages without using the
RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_callmsg(xdrs, cmsg)
XDR *xdrs;
struct rpc_msg *cmsg;
.fi
.ft R
.IP
Used for describing
RPC
call messages.
This routine is useful for users who wish to generate
RPC-style
messages without using the
RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_opaque_auth(xdrs, ap)
XDR *xdrs;
struct opaque_auth *ap;
.fi
.ft R
.IP
Used for describing
RPC
authentication information messages.
This routine is useful for users who wish to generate
RPC-style
messages without using the
RPC
package.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmap(xdrs, regs)
XDR *xdrs;
struct pmap *regs;
.fi
.ft R
.IP
Used for describing parameters to various
.B portmap
procedures, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_pmaplist(xdrs, rp)
XDR *xdrs;
struct pmaplist **rp;
.fi
.ft R
.IP
Used for describing a list of port mappings, externally.
This routine is useful for users who wish to generate
these parameters without using the
.B pmap
interface.
.br
.if t .ne 7
.LP
.ft B
.nf
.sp .5
xdr_rejected_reply(xdrs, rr)
XDR *xdrs;
struct rejected_reply *rr;
.fi
.ft R
.IP
Used for describing
RPC
reply messages.
This routine is useful for users who wish to generate
RPC-style
messages without using the
RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
xdr_replymsg(xdrs, rmsg)
XDR *xdrs;
struct rpc_msg *rmsg;
.fi
.ft R
.IP
Used for describing
RPC
reply messages.
This routine is useful for users who wish to generate
RPC
style messages without using the
RPC
package.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_register(xprt)
SVCXPRT *xprt;
.fi
.ft R
.IP
After
RPC
service transport handles are created,
they should register themselves with the
RPC
service package.
This routine modifies the global variable
.BR svc_fds ().
Service implementors usually do not need this routine.
.br
.if t .ne 8
.LP
.ft B
.nf
.sp .5
void
xprt_unregister(xprt)
SVCXPRT *xprt;
.fi
.ft R
.IP
Before an
RPC
service transport handle is destroyed,
it should unregister itself with the
RPC
service package.
This routine modifies the global variable
.BR svc_fds ().
Service implementors usually do not need this routine.
.SH "SEE ALSO"
.\" We don't have an rpc_secure.3 page in the set at the moment -- MTK, 19 Sep 05
.\" .BR rpc_secure (3),
.BR xdr (3)
.br
The following manuals:
.RS
.ft I
Remote Procedure Calls: Protocol Specification
.br
Remote Procedure Call Programming Guide
.br
rpcgen Programming Guide
.br
.ft R
.RE
.IR "RPC: Remote Procedure Call Protocol Specification" ,
RFC\ 1050, Sun Microsystems, Inc.,
USC-ISI.
