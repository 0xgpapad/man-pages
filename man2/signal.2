.\" Copyright (c) 2000 Andries Brouwer <aeb@cwi.nl>
.\" and Copyright (c) 2007 Michael Kerrisk <mtk-manpages@gmx.net>
.\" based on work by Rik Faith <faith@cs.unc.edu>
.\" and Mike Battersby <mike@starbug.apana.org.au>.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 2004-11-19, mtk:
.\" added pointer to sigaction.2 for details of ignoring SIGCHLD
.\" 2007-06-03, mtk: strengthened portability warning, and rerote
.\"     various sections.
.\"
.TH SIGNAL 2 2007-06-03 "Linux" "Linux Programmer's Manual"
.SH NAME
signal \- ANSI C signal handling
.SH SYNOPSIS
.B #include <signal.h>
.sp
.B typedef void (*sighandler_t)(int);
.sp
.BI "sighandler_t signal(int " signum ", sighandler_t " handler );
.SH DESCRIPTION
The behavior of
.BR signal ()
varies across Unix versions,
and has also varied historically across different versions of Linux.
\fBAvoid its use\fP: use
.BR sigaction (2)
instead.
See \fIPortability\fP below.

.BR signal ()
sets the disposition of the signal
.IR signum
to
.IR handler ,
which is either
.BR SIG_IGN ,
.BR SIG_DFL ,
or the address of a programmer-defined function (a "signal handler"),

If the signal
.I signum
is delivered to the process, then one of the following happens:
.TP 3
*
If the disposition is set to
.BR SIG_IGN ,
then the signal is ignored.
.TP
*
If the disposition is set to
.BR SIG_DFL ,
then the default action associated with the signal (see
.BR signal (7))
occurs.
.TP
*
If the disposition is set to a function,
then first either the disposition is reset to
.BR SIG_DFL ,
or the signal is blocked (see \fIPortability\fP below), and then
.I handler
is called with argument
.IR signum .
If invocation of the handler caused the signal to be blocked,
then the signal is unblocked upon return from the handler.
.PP
The signals
.B SIGKILL
and
.B SIGSTOP
cannot be caught or ignored.
.SH "RETURN VALUE"
.BR signal ()
returns the previous value of the signal handler, or
.B SIG_ERR
on error.
.SH ERRORS
.TP
.B EINVAL
.I signum
is invalid.
.SH "CONFORMING TO"
C89, C99, POSIX.1-2001.
.SH NOTES
The effects of
.BR signal ()
in a multi-threaded process are unspecified.
.PP
According to POSIX, the behavior of a process is undefined after it
ignores a
.BR SIGFPE ,
.BR SIGILL ,
or
.B SIGSEGV
signal that was not generated by
.BR kill (2)
or the
.BR raise (3).
Integer division by zero has undefined result.
On some architectures it will generate a
.B SIGFPE
signal.
(Also dividing the most negative integer by \-1 may generate
.BR SIGFPE .)
Ignoring this signal might lead to an endless loop.
.PP
See
.BR sigaction (2)
for details on what happens when
.B SIGCHLD
is set to
.BR SIG_IGN .
.PP
See
.BR signal (7)
for a list of the async-signal-safe functions that can be
safely called inside from inside a signal handler.
.PP
The use of
.B sighandler_t
is a GNU extension.
Various versions of libc predefine this type; libc4 and libc5 define
.IR SignalHandler ,
glibc defines
.I sig_t
and, when
.B _GNU_SOURCE
is defined, also
.IR sighandler_t .
.SS Portability
The original Unix
.BR signal ()
would reset the handler to
.BR SIG_DFL ,
and System V
(and the Linux kernel and libc4,5) does the same.
On the other hand, BSD does not reset the handler, but blocks
new instances of this signal from occurring during a call of the handler.
The glibc2 library follows the BSD behavior.

If one on a libc5 system includes
.I <bsd/signal.h>
instead of
.I <signal.h>
then
.BR signal ()
is redefined as
.BR __bsd_signal ()
and
.BR signal ()
has the BSD semantics.
This is not recommended.

If one on a glibc2 system defines a feature test
macro such as
.B _XOPEN_SOURCE
or uses a separate
.BR sysv_signal (3)
function, one obtains classical behavior.
This is not recommended.
.SH "SEE ALSO"
.BR kill (1),
.BR alarm (2),
.BR kill (2),
.BR pause (2),
.BR sigaction (2),
.BR sigpending (2),
.BR sigprocmask (2),
.BR sigqueue (2),
.BR sigsuspend (2),
.BR bsd_signal (3),
.BR killpg (3),
.BR raise (3),
.BR siginterrupt (3),
.BR sigsetops (3),
.BR sigvec (3),
.BR sysv_signal (3),
.BR feature_test_macros (7),
.BR signal (7)
