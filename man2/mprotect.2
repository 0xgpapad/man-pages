.\" -*- nroff -*-
.\"
.\" Copyright (C) 1995 Michael Shields <shields@tembel.org>.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and author of this work.
.\"
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-05-31 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2003-08-24 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2004-08-16 by Andi Kleen <ak@muc.de>
.\"
.TH MPROTECT 2 2003-08-24 "Linux 2.4" "Linux Programmer's Manual"
.SH NAME
mprotect \- control allowable accesses to a region of memory
.SH SYNOPSIS
.nf
.B #include <sys/mman.h>
.sp
\fBint mprotect(const void *\fIaddr\fB, size_t \fIlen\fB, int \fIprot\fB);
.fi
.SH DESCRIPTION
The function
.BR mprotect ()
specifies the desired protection for the memory page(s) containing
part or all of the interval [\fIaddr\fP,\fIaddr\fP+\fIlen\fP\-1].
If an access is disallowed by the protection given it,
the program receives a
.BR SIGSEGV .
.PP
.I prot
is a bitwise-or of the following values:
.TP 1.1i
.B PROT_NONE
The memory cannot be accessed at all.
.TP
.B PROT_READ
The memory can be read.
.TP
.B PROT_WRITE
The memory can be written to.
.TP
.B PROT_EXEC
The memory can contain executing code.
.\" FIXME
.\" Document MAP_GROWSUP and MAP_GROWSDOWN
.PP
The new protection replaces any existing protection.
For example, if the
memory had previously been marked \fBPROT_READ\fR, and
.BR mprotect ()
is then called with \fIprot\fR \fBPROT_WRITE\fR, it will no longer
be readable.
.SH "RETURN VALUE"
On success,
.BR mprotect ()
returns zero.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EACCES
The memory cannot be given the specified access.
This can happen, for example, if you
.BR mmap (2)
a file to which you have read-only access, then ask
.BR mprotect ()
to mark it
.BR PROT_WRITE .
.TP
.B EFAULT
The memory cannot be accessed.
.TP
.B EINVAL
\fIaddr\fR is not a valid pointer, or not a multiple of PAGESIZE.
.TP
.B ENOMEM
Internal kernel structures could not be allocated.
Or: addresses  in the range
.RI [ addr ,
.IR addr + len ]
are invalid for the address space of the process,
or specify one or more pages that are not mapped.
.SH "CONFORMING TO"
SVr4, POSIX.1-2001.
.\" SVr4 defines an additional error
.\" code EAGAIN. The SVr4 error conditions don't map neatly onto Linux's.
POSIX says that
.BR mprotect ()
can be used only on regions of memory obtained from
.BR mmap (2).
.SH NOTES
On Linux it is always legal to call
.BR mprotect ()
on any address in a process' address space (except for the
kernel vsyscall area).
In particular it can be used
to change existing code mappings to be writable.

Whether
.B PROT_EXEC
has any effect different from
.B PROT_READ
is architecture and kernel version dependent.
.SH EXAMPLE
.PP
The program below allocates 4 pages of memory, makes the third
of these pages read-only, and then executes a loop that walks upwards
through the allocated region modifying bytes.

An example of what we might see when running the program is the
following:

.in +0.5i
.nf
$ ./a.out
Start of region:        0x804c000
Got SIGSEGV at address: 0x804e000
.fi
.in
.nf

#include <unistd.h>
#include <signal.h>
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/mman.h>

char *buffer;

static void
handler(int sig, siginfo_t *si, void *unused)
{
    printf("Got SIGSEGV at address: 0x%lx\\n", 
            (long) si->si_addr);
    exit(EXIT_FAILURE);
}

int
main(int argc, char *argv[])
{
    char *p;
    int pagesize;
    struct sigaction sa;

    sa.sa_flags = SA_SIGINFO;
    sigemptyset(&sa.sa_mask);
    sa.sa_sigaction = handler;
    if (sigaction(SIGSEGV, &sa, NULL) == -1) {
        perror("sigaction");
        exit(EXIT_FAILURE);
    }

    pagesize = sysconf(_SC_PAGE_SIZE);
    if (pagesize == -1) {
        perror("sysconf");
        exit(EXIT_FAILURE);
    }

    /* Allocate a buffer aligned on a page boundary; 
       initial protection is PROT_READ | PROT_WRITE */

    buffer = memalign(pagesize, 4 * pagesize);
    if (buffer == NULL) {
        perror("memalign");
        exit(EXIT_FAILURE);
    }

    printf("Start of region:        0x%lx\\n", (long) buffer);

    if (mprotect(buffer + pagesize * 2, pagesize, 
                PROT_NONE) == -1) {
        perror("mprotect");
        exit(EXIT_FAILURE);
    }

    for (p = buffer ; ; )
        *(p++) = 'a';

    printf("Loop completed\\n");     /* Should never happen */
    exit(EXIT_SUCCESS);
}
.fi
.SH "SEE ALSO"
.BR mmap (2)
