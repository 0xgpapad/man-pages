.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\" This file is distributed according to the GNU General Public License.
.\" See the file COPYING in the top level source directory for details.
.\"
.\" .de Sh \" Subsection
.\" .br
.\" .if t .Sp
.\" .ne 5
.\" .PP
.\" \fB\\$1\fP
.\" .PP
.\" ..
.\" .de Sp \" Vertical space (when we can't use .PP)
.\" .if t .sp .5v
.\" .if n .sp
.\" ..
.\" .de Ip \" List item
.\" .br
.\" .ie \\n(.$>=3 .ne \\$3
.\" .el .ne 3
.\" .IP "\\$1" \\$2
.\" ..
.TH IO_GETEVENTS 2 2003-02-21 "Linux" "Linux Programmer's Manual"
.SH NAME
io_getevents \- read asynchronous I/O events from the completion queue
.SH "SYNOPSIS"
.nf
.\" .ad l
.\" .hy 0
.B #include <linux/time.h>
.B #include <libaio.h>
.\" #include <linux/aio.h>
.sp
.\" .HP 19
.BI "int io_getevents(aio_context_t " ctx_id ", long " min_nr ", long " nr ,
.BI "                 struct io_event *" events \
", struct timespec *" timeout );
.\" .ad
.\" .hy
.sp
Link with \fI\-laio\fP.
.fi
.SH "DESCRIPTION"
.PP
.BR io_getevents ()
attempts to read at least \fImin_nr\fP events and
up to \fInr\fP events from the completion queue of the AIO context
specified by \fIctx_id\fP.
\fItimeout\fP specifies the amount of time to wait for events,
where a NULL timeout waits until at least \fImin_nr\fP events
have been seen.
Note that \fItimeout\fP is relative and will be updated if not NULL
and the operation blocks.
.SH "RETURN VALUE"
.PP
On success,
.BR io_getevents ()
returns the number of events read: 0 if no events are
available or < \fImin_nr\fP if the \fItimeout\fP has elapsed;
on failure, it returns one of the errors listed under ERRORS.
.SH "ERRORS"
.TP
.B EINVAL
\fIctx_id\fP is invalid.
\fImin_nr\fP is out of range or \fInr\fP is
out of range.
.TP
.B EFAULT
Either \fIevents\fP or \fItimeout\fP is an invalid pointer.
.TP
.B ENOSYS
.BR io_getevents ()
is not implemented on this architecture.
.SH "VERSIONS"
.PP
The asynchronous I/O system calls first appeared in Linux 2.5, August 2002.
.SH "CONFORMING TO"
.PP
.BR io_getevents ()
is Linux-specific and should not be used in
programs that are intended to be portable.
.SH "SEE ALSO"
.PP
.BR io_setup (2),
.BR io_submit (2),
.BR io_cancel (2),
.BR io_destroy (2)
.\" .SH "NOTES"
.\"
.\" .PP
.\" The asynchronous I/O system calls were written by Benjamin LaHaise.
.\"
.\" .SH AUTHOR
.\" Kent Yoder.
