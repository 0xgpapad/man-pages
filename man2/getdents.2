.\" Copyright (C) 1995 Andries Brouwer (aeb@cwi.nl)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Written 11 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 22 July 1995 by Michael Chastain <mec@duracef.shout.net>:
.\"   Derived from 'readdir.2'.
.\" Modified Tue Oct 22 08:11:14 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.TH GETDENTS 2  2009-10-02 "Linux" "Linux Programmer's Manual"
.SH NAME
getdents \- get directory entries
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.B #include <linux/types.h>
.B #include <linux/dirent.h>
.B #include <linux/unistd.h>
.B #include <errno.h>

.BI "int getdents(unsigned int " fd ", struct linux_dirent *" dirp ,
.BI "             unsigned int " count );
.fi
.SH DESCRIPTION
This is not the function you are interested in.
Look at
.BR readdir (3)
for the POSIX conforming C library interface.
This page documents the bare kernel system call interface.
.PP
The system call
.BR getdents ()
reads several
.I linux_dirent
structures from the directory
referred to by the open file descriptor
.I fd
into the buffer pointed to by
.IR dirp .
The argument
.I count
is the size of the memory area.
.PP
The
.I linux_dirent
structure is declared as follows:
.PP
.in +4n
.nf
struct linux_dirent {
    unsigned long  d_ino;     /* Inode number */
    unsigned long  d_off;     /* Offset to next \fIlinux_dirent\fP */
    unsigned short d_reclen;  /* Length of this \fIlinux_dirent\fP */
    char           d_name []; /* Filename (null-terminated) */
                        /* length is actually (d_reclen \- 2 \-
                           offsetof(struct linux_dirent, d_name) */
    char           pad;       /* Zero padding byte */
    char           d_type;    /* File type (only since Linux 2.6.4;
                                 offset is (d_reclen \- 1)) */

}
.fi
.in
.PP
.I d_ino
is an inode number.
.I d_off
is the distance from the start of the directory to the start of the next
.IR linux_dirent .
.I d_reclen
is the size of this entire
.IR linux_dirent .
.I d_name
is a null-terminated filename.

.I d_type
is a byte at the end of the structure that indicates the file type.
It contains one of the following values:
.TP 12
.B DT_BLK
This is a block device.
.TP
.B DT_CHR
This is a character device.
.TP
.B DT_DIR
This is a directory.
.TP
.B DT_FIFO
This is a named pipe (FIFO).
.TP
.B DT_LNK
This is a symbolic link.
.TP
.B DT_REG
This is a regular file.
.TP
.B DT_SOCK
This is a Unix domain socket.
.TP
.B DT_UNKNOWN
The file type is unknown.
.PP
Curently,
.\" kernel 2.6.27
only ext2, ext3, and ext4 support returning the file type in
.IR d_type .
On other file systems,
this field is always set to
.BR DT_UNKNOWN .
.SH "RETURN VALUE"
On success, the number of bytes read is returned.
On end of directory, 0 is returned.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EBADF
Invalid file descriptor
.IR fd .
.TP
.B EFAULT
Argument points outside the calling process's address space.
.TP
.B EINVAL
Result buffer is too small.
.TP
.B ENOENT
No such directory.
.TP
.B ENOTDIR
File descriptor does not refer to a directory.
.SH "CONFORMING TO"
SVr4.
.\" SVr4 documents additional ENOLINK, EIO error conditions.
.SH NOTES
Glibc does not provide a wrapper for this system call; call it using
.BR syscall (2).
You will need to define the
.I linux_dirent
structure yourself.

This call supersedes
.BR readdir (2).
.SH "SEE ALSO"
.BR readdir (2),
.BR readdir (3)
